//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClient.TeapotServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Teapot", Namespace="http://schemas.datacontract.org/2004/07/WcfTest.Models")]
    [System.SerializableAttribute()]
    public partial class Teapot : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImgUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerCountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WarrantyInMonthsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((this.CapacityField.Equals(value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImgUrl {
            get {
                return this.ImgUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImgUrlField, value) != true)) {
                    this.ImgUrlField = value;
                    this.RaisePropertyChanged("ImgUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManufacturerCountry {
            get {
                return this.ManufacturerCountryField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerCountryField, value) != true)) {
                    this.ManufacturerCountryField = value;
                    this.RaisePropertyChanged("ManufacturerCountry");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WarrantyInMonths {
            get {
                return this.WarrantyInMonthsField;
            }
            set {
                if ((this.WarrantyInMonthsField.Equals(value) != true)) {
                    this.WarrantyInMonthsField = value;
                    this.RaisePropertyChanged("WarrantyInMonths");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeapotServiceReference.ITeapotService")]
    public interface ITeapotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/AddTeapot", ReplyAction="http://tempuri.org/ITeapotService/AddTeapotResponse")]
        int AddTeapot(WcfClient.TeapotServiceReference.Teapot newTeapot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/AddTeapot", ReplyAction="http://tempuri.org/ITeapotService/AddTeapotResponse")]
        System.Threading.Tasks.Task<int> AddTeapotAsync(WcfClient.TeapotServiceReference.Teapot newTeapot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/DeleteTeapotById", ReplyAction="http://tempuri.org/ITeapotService/DeleteTeapotByIdResponse")]
        int DeleteTeapotById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/DeleteTeapotById", ReplyAction="http://tempuri.org/ITeapotService/DeleteTeapotByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteTeapotByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/GetTeapots", ReplyAction="http://tempuri.org/ITeapotService/GetTeapotsResponse")]
        WcfClient.TeapotServiceReference.Teapot[] GetTeapots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/GetTeapots", ReplyAction="http://tempuri.org/ITeapotService/GetTeapotsResponse")]
        System.Threading.Tasks.Task<WcfClient.TeapotServiceReference.Teapot[]> GetTeapotsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/GetTeapotById", ReplyAction="http://tempuri.org/ITeapotService/GetTeapotByIdResponse")]
        WcfClient.TeapotServiceReference.Teapot GetTeapotById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/GetTeapotById", ReplyAction="http://tempuri.org/ITeapotService/GetTeapotByIdResponse")]
        System.Threading.Tasks.Task<WcfClient.TeapotServiceReference.Teapot> GetTeapotByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/EditTeapot", ReplyAction="http://tempuri.org/ITeapotService/EditTeapotResponse")]
        int EditTeapot(WcfClient.TeapotServiceReference.Teapot editedTeapot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeapotService/EditTeapot", ReplyAction="http://tempuri.org/ITeapotService/EditTeapotResponse")]
        System.Threading.Tasks.Task<int> EditTeapotAsync(WcfClient.TeapotServiceReference.Teapot editedTeapot);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITeapotServiceChannel : WcfClient.TeapotServiceReference.ITeapotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TeapotServiceClient : System.ServiceModel.ClientBase<WcfClient.TeapotServiceReference.ITeapotService>, WcfClient.TeapotServiceReference.ITeapotService {
        
        public TeapotServiceClient() {
        }
        
        public TeapotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TeapotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeapotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TeapotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddTeapot(WcfClient.TeapotServiceReference.Teapot newTeapot) {
            return base.Channel.AddTeapot(newTeapot);
        }
        
        public System.Threading.Tasks.Task<int> AddTeapotAsync(WcfClient.TeapotServiceReference.Teapot newTeapot) {
            return base.Channel.AddTeapotAsync(newTeapot);
        }
        
        public int DeleteTeapotById(int id) {
            return base.Channel.DeleteTeapotById(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteTeapotByIdAsync(int id) {
            return base.Channel.DeleteTeapotByIdAsync(id);
        }
        
        public WcfClient.TeapotServiceReference.Teapot[] GetTeapots() {
            return base.Channel.GetTeapots();
        }
        
        public System.Threading.Tasks.Task<WcfClient.TeapotServiceReference.Teapot[]> GetTeapotsAsync() {
            return base.Channel.GetTeapotsAsync();
        }
        
        public WcfClient.TeapotServiceReference.Teapot GetTeapotById(int id) {
            return base.Channel.GetTeapotById(id);
        }
        
        public System.Threading.Tasks.Task<WcfClient.TeapotServiceReference.Teapot> GetTeapotByIdAsync(int id) {
            return base.Channel.GetTeapotByIdAsync(id);
        }
        
        public int EditTeapot(WcfClient.TeapotServiceReference.Teapot editedTeapot) {
            return base.Channel.EditTeapot(editedTeapot);
        }
        
        public System.Threading.Tasks.Task<int> EditTeapotAsync(WcfClient.TeapotServiceReference.Teapot editedTeapot) {
            return base.Channel.EditTeapotAsync(editedTeapot);
        }
    }
}
